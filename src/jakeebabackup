#!/bin/sh

# jakeebabackup -- Find Joomla instances and backup them with Akeeba CLI
#
# Backups older than configurable number of days days are automatically cleaned
#
# Copyright 2016 Rene Kreijveld - r.kreijveld@dsd.nu
#
# This program is free software; you may redistribute it and/or modify it.
#
# Version history
# 1.0 Initial version
# 1.1 Suppressed output and added better logging message
# 1.2 Correct error output suppression

# define variables
version=1.2
startdir=/home
storepath=/backups/sites
logfile=/usr/local/sbin/sitesbackup.log
savebackups=4
now=$(date +"%Y%m%d-%H%M%S")

# Determine path of script
mypath=$(cd $(dirname ${0}); pwd -P)

if [ ! -d "${storepath}" ]; then
		echo "Backup directory does not exist!"
		exit 1
fi

# display usage information
usage() {
	echo ""
	echo "${myname} version ${version}, written by Rene Kreijveld."
	echo ""
	echo "Usage: ${myname} [-b <backups>] [-h]"
	echo ""
	echo "-b Number of backups to keep, '-b 2' means keep 2 backups. Default is 4."
	echo "-h Help. Display this info."
	echo ""
	exit 0
}

# process the arguments
while getopts ":b::h" opt; do
	case "${opt}" in
		b)
			savebackups=${OPTARG}
			;;
		h)
			usage
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done

for dir in $(find ${startdir} -maxdepth 4 -type d -name "public_html"); do
	if [ -f ${dir}/configuration.php ]; then
		# possible joomla found
		cd ${dir}
		echo "$(date) Joomla found in ${dir}" >> ${logfile}
		# gather joomla information
		. ${mypath}/jfunctions
		# create backup
		echo "`date` Start Akeeba backup ${sitename}" >> ${logfile}
		cd cli
		/usr/local/bin/php akeeba-backup.php >/dev/null 2>&1
		cd ..
		mv administrator/components/com_akeeba/backup/*.jpa ${storepath}
		echo "`date` End Akeeba backup ${sitename}" >> ${logfile}
	fi
done

# cleanup backups older than savebackups days
cd ${storepath}
find . -type f -mtime +${savebackups} -exec rm {} \;